{"version":3,"file":"react-var-ui.cjs.production.min.js","sources":["../src/common/VarUIContext.ts","../src/VarBase.tsx","../src/VarAngle.tsx","../src/common/roundValue.ts","../src/icons/IconDown.tsx","../src/icons/IconUp.tsx","../src/VarXY.tsx","../src/VarButton.tsx","../src/VarCategory.tsx","../src/VarColor.tsx","../src/VarDisplay.tsx","../src/VarNumber.tsx","../src/VarSelect.tsx","../src/VarSlider.tsx","../src/VarString.tsx","../src/VarToggle.tsx","../src/VarUI.tsx"],"sourcesContent":["import { createContext, useContext, useMemo, useCallback } from 'react';\n\nexport type VarUIObject = any;\n\nexport interface IVarUIContext {\n  values: VarUIObject;\n  getValue: (path?: string) => any;\n  setValue: (path: string, value: any) => void;\n}\n\nexport const VarUIContext = createContext<IVarUIContext | undefined>(undefined);\n\n/**\n * Simple function used for custom input components.\n * @param path\n * @param fallbackValue\n * @param onChange\n * @returns [value: T, setValue: (value: T) => void]\n */\nexport function useVarUIValue<T>(\n  path?: string,\n  fallbackValue?: T,\n  onChange?: (value: T) => void\n): [T, (value: T) => void] {\n  const context = useContext(VarUIContext);\n  const value = useMemo(() => context?.getValue(path) ?? fallbackValue, [\n    context,\n    path,\n    fallbackValue\n  ]);\n  const setValue = useCallback(\n    (value: T) => {\n      if (path && context) {\n        context.setValue(path, value);\n      }\n\n      onChange?.(value);\n    },\n    [path, context, onChange]\n  );\n\n  return [value, setValue];\n}\n","import React, { FC, ReactChild, ReactNode } from 'react';\n\nexport interface IVarBaseProps {\n  /**\n   * Label to be shown left to the input.\n   */\n  label?: ReactChild;\n\n  /**\n   * Additional class names on the wrapping div element.\n   */\n  className?: string;\n\n  /**\n   * Should the component be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Children. Only rendered when provided directly to the VarBase component.\n   */\n  children?: ReactNode;\n}\n\nexport interface IVarBaseInputProps<T> extends IVarBaseProps {\n  /**\n   * Variable path in the data object.\n   */\n  path?: string;\n\n  /**\n   * Current value (only used if context and path aren't available).\n   * In most cases you aren't going to need this.\n   */\n  value?: T;\n\n  /**\n   * Default value for components that support resetting (on double click for example).\n   */\n  defaultValue?: T;\n\n  /**\n   * On change event, called with the new value if provided.\n   * In most cases you aren't going to need this.\n   */\n  onChange?: (value: T) => void;\n}\n\n/**\n * Base VarUI input component. Doesn't do anything besides displaying the label.\n * Used to construct other components from.\n */\nexport const VarBase: FC<IVarBaseProps> = ({\n  label,\n  children,\n  className,\n  disabled\n}) => {\n  return (\n    <div\n      className={\n        'react-var-ui-label ' +\n        (label\n          ? 'react-var-ui-label-has-label '\n          : 'react-var-ui-label-no-label ') +\n        (disabled ? 'react-var-ui-disabled ' : '') +\n        (className ? className : '')\n      }\n    >\n      {!!label && <span>{label}</span>}\n      {children}\n    </div>\n  );\n};\n","import React, { FC, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { usePointerDragSimple } from 'react-use-pointer-drag';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nconst PI2 = Math.PI * 2;\n\nfunction wrap(angle: number) {\n  return (PI2 + (angle % PI2)) % PI2;\n}\n\nexport interface IVarAngleProps extends IVarBaseInputProps<number> {}\n\n/**\n * Angle picker component. Accepts and provides numbers (radians).\n */\nexport const VarAngle: FC<IVarAngleProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  disabled,\n  defaultValue = 0,\n  className,\n}) => {\n  const controlRef = useRef<HTMLDivElement>(null);\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const degrees = useMemo(\n    () => Math.round(wrap(currentValue) * (180 / Math.PI)),\n    [currentValue]\n  );\n\n  const updatePosition = useCallback(\n    (x: number, y: number) => {\n      if (!controlRef.current) {\n        return;\n      }\n\n      const div = controlRef.current;\n      const rect = div.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      setCurrentValue(wrap(Math.atan2(y - centerY, x - centerX) + Math.PI / 2));\n    },\n    [setCurrentValue]\n  );\n\n  const { events } = usePointerDragSimple(updatePosition);\n\n  useEffect(() => {\n    controlRef.current?.addEventListener('wheel', e => e.preventDefault());\n  }, []);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span className=\"react-var-ui-angle-value\">{degrees}&deg;</span>\n      <div className=\"react-var-ui-angle\">\n        <div\n          className=\"react-var-ui-angle-control\"\n          ref={controlRef}\n          style={{ transform: `rotate(${degrees}deg)` }}\n          onDoubleClick={() =>\n            typeof defaultValue !== 'undefined' && setCurrentValue(defaultValue)\n          }\n          onWheel={e => {\n            setCurrentValue(wrap(currentValue + 0.5 * (e.deltaY < 0 ? -1 : 1)));\n          }}\n          title=\"Angle\"\n          {...events}\n        ></div>\n      </div>\n    </VarBase>\n  );\n};\n","export function roundValue(\n  value: number,\n  min?: number,\n  max?: number,\n  step?: number,\n  integer?: boolean\n): number {\n  if (!isFinite(value)) {\n    value = min ?? 0;\n  }\n\n  let decimalPlaces = 2;\n  if (typeof step === 'number') {\n    decimalPlaces = step.toString().split('.')[1]?.length || 0;\n\n    if (decimalPlaces > 20) {\n      // JavaScript limitation\n      decimalPlaces = 20;\n    }\n\n    value = Math.round(value / step) * step;\n  }\n\n  if (typeof min === 'number') {\n    value = Math.max(min, value);\n  }\n\n  if (typeof max === 'number') {\n    value = Math.min(max, value);\n  }\n\n  return integer ? Math.round(value) : parseFloat(value.toFixed(decimalPlaces));\n}\n","import React, { FC } from 'react';\n\nexport const IconDown: FC = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"\n      />\n    </svg>\n  );\n};\n","import React, { FC } from 'react';\n\nexport const IconUp: FC = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"\n      />\n    </svg>\n  );\n};\n","import React, { FC, useCallback, useMemo, useRef } from 'react';\nimport { usePointerDragSimple } from 'react-use-pointer-drag';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport type IVarXYValue = [number, number];\n\nexport interface IVarXYProps extends IVarBaseInputProps<IVarXYValue> {\n  /**\n   * Minimum value.\n   */\n  min?: IVarXYValue;\n\n  /**\n   * Maximum value.\n   */\n  max?: IVarXYValue;\n\n  /**\n   * Step.\n   */\n  step?: IVarXYValue;\n}\n\nfunction roundValue(\n  value: IVarXYValue,\n  min: IVarXYValue,\n  max: IVarXYValue,\n  step: IVarXYValue\n): IVarXYValue {\n  const result: IVarXYValue = [0, 0];\n\n  if (!value || !Array.isArray(value) || value.length < 2) {\n    return result;\n  }\n\n  for (let i = 0; i < step.length; i++) {\n    const decimalPlaces = step[i].toString().split('.')[1]?.length || 0;\n    result[i] = Math.round(value[i] / step[i]) * step[i];\n    result[i] = Math.max(min[i], result[i]);\n    result[i] = Math.min(max[i], result[i]);\n\n    result[i] = parseFloat(result[i].toFixed(decimalPlaces));\n  }\n\n  return result;\n}\n\nfunction percentValue(\n  value: IVarXYValue,\n  min: IVarXYValue,\n  max: IVarXYValue\n): IVarXYValue {\n  if (!value) {\n    return [50, 50];\n  }\n\n  const result: IVarXYValue = [0, 0];\n\n  for (let i = 0; i < value.length; i++) {\n    result[i] = ((value[i] - min[i]) / (max[i] - min[i])) * 100;\n  }\n\n  return result;\n}\n\n/**\n * XY offset picker. Accepts and provides an array in form of [x, y].\n */\nexport const VarXY: FC<IVarXYProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  disabled,\n  className,\n  defaultValue = [0, 0],\n  min = [-1.0, -1.0],\n  max = [1.0, 1.0],\n  step = [0.01, 0.01]\n}) => {\n  const sliderRef = useRef<HTMLDivElement>(null);\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const rounded = useMemo(() => roundValue(currentValue, min, max, step), [\n    currentValue,\n    min,\n    max,\n    step\n  ]);\n  const percent = useMemo(() => percentValue(rounded, min, max), [\n    rounded,\n    min,\n    max\n  ]);\n\n  const updatePosition = useCallback(\n    (x: number, y: number) => {\n      if (!sliderRef.current) {\n        return;\n      }\n\n      const div = sliderRef.current;\n      const rect = div.getBoundingClientRect();\n\n      const percentX = (x - rect.left) / rect.width;\n      const percentY = (y - rect.top) / rect.height;\n\n      const value = roundValue(\n        [\n          min[0] + (max[0] - min[0]) * percentX,\n          min[1] + (max[1] - min[1]) * percentY\n        ],\n        min,\n        max,\n        step\n      );\n      setCurrentValue(value);\n    },\n    [setCurrentValue, min, max, step]\n  );\n\n  const { events } = usePointerDragSimple(updatePosition);\n\n  const reset = useCallback(() => {\n    if (typeof defaultValue !== 'undefined') {\n      setCurrentValue(defaultValue);\n    }\n  }, [defaultValue, setCurrentValue]);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span className=\"react-var-ui-xy-value\">\n        {rounded[0]}, {rounded[1]}\n      </span>\n      <div className=\"react-var-ui-xy\">\n        <div\n          className=\"react-var-ui-xy-space\"\n          ref={sliderRef}\n          onClick={e => updatePosition(e.clientX, e.clientY)}\n          onDoubleClick={reset}\n          {...events}\n        >\n          <div\n            className=\"react-var-ui-xy-control\"\n            style={{ top: percent[1] + '%', left: percent[0] + '%' }}\n          ></div>\n        </div>\n      </div>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactNode } from 'react';\n\nimport { IVarBaseProps, VarBase } from './VarBase';\n\nexport interface IVarButtonProps extends IVarBaseProps {\n  /**\n   * Called when the button is clicked.\n   */\n  onClick?: () => void;\n\n  /**\n   * Text for the button.\n   */\n  buttonLabel: ReactNode;\n\n  /**\n   * Should the component be disabled.\n   */\n  disabled?: boolean;\n}\n\n/**\n * Button component. Only provides a onClick property.\n */\nexport const VarButton: FC<IVarButtonProps> = ({\n  label,\n  onClick,\n  buttonLabel,\n  disabled,\n  className\n}) => {\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span className=\"react-var-ui-button\">\n        <button onClick={() => onClick?.()} disabled={disabled}>\n          {buttonLabel}\n        </button>\n      </span>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactNode } from 'react';\n\nexport interface IVarCategoryProps {\n  /**\n   * Category label.\n   */\n  label: ReactNode;\n\n  /**\n   * Additional class names on the wrapping div element.\n   */\n  className?: string;\n}\n\n/**\n * Category component for grouping inputs.\n */\nexport const VarCategory: FC<IVarCategoryProps> = ({\n  label,\n  className,\n  children\n}) => {\n  return (\n    <div className={'react-var-ui-category ' + (className ? className : '')}>\n      <div className=\"react-var-ui-category-title\">{label}</div>\n      {!!children && <div>{children}</div>}\n    </div>\n  );\n};\n","import React, { FC, useCallback, useState } from 'react';\nimport { SketchPicker } from 'react-color';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarColorProps extends IVarBaseInputProps<string> {\n  /**\n   * Should allow picking alpha values?\n   * If true, the result hex code will contain extra two characters representing the alpha value, from 00 to FF.\n   */\n  alpha?: boolean;\n}\n\n/**\n * Color picker component. Returns and accepts values in form of hex color strings.\n */\nexport const VarColor: FC<IVarColorProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  alpha,\n  disabled,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n\n  const [show, setShow] = useState(false);\n  const toggle = useCallback(() => setShow(show => !show), [setShow]);\n  const close = useCallback(() => setShow(false), [setShow]);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span>\n        <span className=\"react-var-ui-color-value\">{currentValue}</span>\n        <div className=\"react-var-ui-color\">\n          <div className=\"react-var-ui-color-swatch\" onClick={toggle}>\n            <div\n              className=\"react-var-ui-color-color\"\n              title=\"Color preview\"\n              style={{ background: currentValue }}\n            />\n          </div>\n          {show ? (\n            <div className=\"react-var-ui-color-popover\">\n              <div className=\"react-var-ui-color-cover\" onClick={close} />\n              <SketchPicker\n                color={currentValue}\n                onChange={result => {\n                  if (alpha) {\n                    let alphaValue = Math.round(\n                      (result.rgb.a ?? 1.0) * 255\n                    ).toString(16);\n                    if (alphaValue.length === 1) {\n                      alphaValue = '0' + alphaValue;\n                    }\n                    setCurrentValue(result.hex + alphaValue);\n                  } else {\n                    setCurrentValue(result.hex);\n                  }\n                }}\n                disableAlpha={!alpha}\n              />\n            </div>\n          ) : null}\n        </div>\n      </span>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactText } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseProps, VarBase } from './VarBase';\n\nexport interface IVarDisplayProps extends IVarBaseProps {\n  /**\n   * Variable path in the data object.\n   */\n  path?: string;\n\n  /**\n   * Current value (only used if context and path aren't available).\n   * In most cases you aren't going to need this.\n   */\n  value?: ReactText;\n}\n\n/**\n * A simple component that displays a string or a numeric value.\n */\nexport const VarDisplay: FC<IVarDisplayProps> = ({\n  label,\n  path,\n  value,\n  disabled,\n  className\n}) => {\n  const [currentValue] = useVarUIValue(path, value);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span>{currentValue}</span>\n    </VarBase>\n  );\n};\n","import React, { FC, useCallback, useMemo } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { roundValue } from './common/roundValue';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\nimport { IconDown } from './icons/IconDown';\nimport { IconUp } from './icons/IconUp';\n\nexport interface IVarNumberProps extends IVarBaseInputProps<number> {\n  /**\n   * Minimum value.\n   */\n  min?: number;\n\n  /**\n   * Maximum value.\n   */\n  max?: number;\n\n  /**\n   * Step.\n   */\n  step?: number;\n\n  /**\n   * Should the end result be rounded to an integer value.\n   */\n  integer?: boolean;\n\n  /**\n   * If true will display buttons that increase and decrease the value by step.\n   * Step must be set.\n   */\n  showButtons?: boolean;\n}\n\n/**\n * Integer/float number component. Accepts and provides numbers.\n */\nexport const VarNumber: FC<IVarNumberProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  min,\n  max,\n  step = 1,\n  integer,\n  showButtons,\n  disabled,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const rounded = useMemo(\n    () => roundValue(currentValue, min, max, step, !!integer),\n    [currentValue, min, max, step, integer]\n  );\n\n  const increaseValue = useCallback(\n    () =>\n      setCurrentValue(\n        roundValue(currentValue + (step ?? 1), min, max, step, !!integer)\n      ),\n    [currentValue, setCurrentValue, integer, min, max, step]\n  );\n\n  const decreaseValue = useCallback(\n    () =>\n      setCurrentValue(\n        roundValue(currentValue - (step ?? 1), min, max, step, !!integer)\n      ),\n    [currentValue, setCurrentValue, integer, min, max, step]\n  );\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <div className=\"react-var-ui-number\">\n        <input\n          className=\"react-var-ui-number-input\"\n          type=\"number\"\n          min={min}\n          max={max}\n          step={step}\n          value={rounded.toString()}\n          onChange={e =>\n            setCurrentValue(\n              roundValue(parseFloat(e.target.value), min, max, step, !!integer)\n            )\n          }\n        />\n        {showButtons && (\n          <>\n            <button title=\"Increase\" onClick={increaseValue}>\n              <IconUp />\n            </button>\n            <button title=\"Decrease\" onClick={decreaseValue}>\n              <IconDown />\n            </button>\n          </>\n        )}\n      </div>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactText, useMemo } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarSelectOption {\n  /**\n   * Key for the option. Also used as value if `value` is not specified.\n   */\n  key: ReactText;\n\n  /**\n   * Option label.\n   */\n  label: string;\n\n  /**\n   * Option value. Key will be used if not specified.\n   * Note: Will be serialized to JSON and deserialized when selected.\n   */\n  value?: any;\n}\n\nexport interface IVarSelectProps extends IVarBaseInputProps<any> {\n  /**\n   * Options to be displayed.\n   */\n  options: IVarSelectOption[];\n}\n\n/**\n * Select component. Returns and accepts either `value` from option object or `key` when `value` is not provided.\n */\nexport const VarSelect: FC<IVarSelectProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  options,\n  disabled,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n\n  const serializedCurrentValue = useMemo(() => JSON.stringify(currentValue), [\n    currentValue,\n  ]);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <div className=\"react-var-ui-select\">\n        <select\n          onChange={e => setCurrentValue(JSON.parse(e.target.value))}\n          value={serializedCurrentValue}\n          title=\"Select options\"\n        >\n          {options.map(option => {\n            const serializedValue = JSON.stringify(option.value ?? option.key);\n\n            return (\n              <option key={option.key} value={serializedValue}>\n                {option.label}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    </VarBase>\n  );\n};\n","import React, { FC, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { usePointerDragSimple } from 'react-use-pointer-drag';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { roundValue } from './common/roundValue';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\nimport { IconDown } from './icons/IconDown';\nimport { IconUp } from './icons/IconUp';\n\nexport interface IVarSliderProps extends IVarBaseInputProps<number> {\n  /**\n   * Minimum value.\n   */\n  min: number;\n\n  /**\n   * Maximum value.\n   */\n  max: number;\n\n  /**\n   * Step.\n   */\n  step: number;\n\n  /**\n   * Should the end result be rounded to an integer value.\n   */\n  integer?: boolean;\n\n  /**\n   * If true will display an editable input, otherwise shows a read only value.\n   */\n  showInput?: boolean;\n\n  /**\n   * If true will display buttons that increase and decrease the value by step.\n   */\n  showButtons?: boolean;\n}\n\n/**\n * Integer/float slider component. Accepts and provides numbers.\n */\nexport const VarSlider: FC<IVarSliderProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  min,\n  max,\n  step,\n  integer,\n  defaultValue,\n  showInput,\n  showButtons,\n  disabled,\n  className,\n}) => {\n  const sliderRef = useRef<HTMLDivElement>(null);\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const rounded = useMemo(\n    () => roundValue(currentValue, min, max, step, !!integer),\n    [currentValue, min, max, step, integer]\n  );\n  const percent = useMemo(() => ((rounded - min) / (max - min)) * 100, [\n    rounded,\n    min,\n    max,\n  ]);\n\n  const updatePosition = useCallback(\n    (x: number) => {\n      if (!sliderRef.current) {\n        return;\n      }\n\n      const div = sliderRef.current;\n      const rect = div.getBoundingClientRect();\n      const percent = (x - rect.left) / rect.width;\n      const value = roundValue(\n        min + (max - min) * percent,\n        min,\n        max,\n        step,\n        !!integer\n      );\n      setCurrentValue(value);\n    },\n    [setCurrentValue, integer, min, max, step]\n  );\n\n  const increaseValue = useCallback(\n    () =>\n      setCurrentValue(\n        roundValue(currentValue + step, min, max, step, !!integer)\n      ),\n    [currentValue, setCurrentValue, integer, min, max, step]\n  );\n\n  const decreaseValue = useCallback(\n    () =>\n      setCurrentValue(\n        roundValue(currentValue - step, min, max, step, !!integer)\n      ),\n    [currentValue, setCurrentValue, integer, min, max, step]\n  );\n\n  const { events } = usePointerDragSimple(updatePosition);\n\n  useEffect(() => {\n    sliderRef.current?.addEventListener('wheel', e => e.preventDefault());\n  }, []);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <div className=\"react-var-ui-slider\">\n        <div\n          className=\"react-var-ui-slider-track\"\n          ref={sliderRef}\n          onClick={e => updatePosition(e.clientX)}\n          onDoubleClick={() =>\n            typeof defaultValue !== 'undefined' && setCurrentValue(defaultValue)\n          }\n          onWheel={e => {\n            e.deltaY < 0 ? increaseValue() : decreaseValue();\n          }}\n          title=\"Slider\"\n          {...events}\n        >\n          <div\n            className=\"react-var-ui-slider-content\"\n            style={{ width: percent + '%' }}\n          ></div>\n        </div>\n        {showInput ? (\n          <input\n            className=\"react-var-ui-slider-input\"\n            type=\"number\"\n            min={min}\n            max={max}\n            step={step}\n            value={rounded}\n            onChange={e =>\n              setCurrentValue(\n                roundValue(\n                  parseFloat(e.target.value),\n                  min,\n                  max,\n                  step,\n                  !!integer\n                )\n              )\n            }\n          />\n        ) : (\n          <span>{rounded.toString()}</span>\n        )}\n        {showButtons && (\n          <>\n            <button title=\"Increase\" onClick={increaseValue}>\n              <IconUp />\n            </button>\n            <button title=\"Decrease\" onClick={decreaseValue}>\n              <IconDown />\n            </button>\n          </>\n        )}\n      </div>\n    </VarBase>\n  );\n};\n","import React, { CSSProperties, FC, useMemo } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarStringProps extends IVarBaseInputProps<string> {\n  /**\n   * Maximum length of the text.\n   */\n  maxLength?: number;\n\n  /**\n   * Should the field be a textarea?\n   */\n  multiline?: boolean;\n\n  /**\n   * Should the text field auto expand?\n   * Only works with multiline instances.\n   */\n  autoexpand?: boolean;\n}\n\n/**\n * String input component. Accepts and provides a string value.\n */\nexport const VarString: FC<IVarStringProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  maxLength,\n  multiline,\n  autoexpand,\n  disabled,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n\n  const autoexpandOnInput = (event: React.FormEvent<HTMLTextAreaElement>) => {\n    const textarea = event.currentTarget;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  };\n\n  const textareaStyle: CSSProperties | undefined = useMemo(\n    () => (autoexpand ? { overflow: 'hidden', resize: 'none' } : undefined),\n    [autoexpand]\n  );\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      {multiline ? (\n        <textarea\n          className=\"react-var-ui-string-multiline\"\n          value={currentValue}\n          onChange={e => setCurrentValue(e.target.value)}\n          onInput={autoexpand ? autoexpandOnInput : undefined}\n          style={textareaStyle}\n        />\n      ) : (\n        <span className=\"react-var-ui-string\">\n          <input\n            type=\"text\"\n            maxLength={maxLength}\n            value={currentValue}\n            onChange={e => setCurrentValue(e.target.value)}\n          />\n        </span>\n      )}\n    </VarBase>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarToggleProps extends IVarBaseInputProps<boolean> {}\n\n/**\n * Checkbox/toggle component. Accepts and returns a boolean (true/false).\n */\nexport const VarToggle: FC<IVarToggleProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  disabled,\n  className\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span>\n        <label className=\"react-var-ui-toggle\" title=\"Toggle\">\n          <input\n            type=\"checkbox\"\n            checked={currentValue}\n            onChange={e => setCurrentValue(e.target.checked)}\n          />\n          <span className=\"react-var-ui-toggle-helper\"></span>\n        </label>\n      </span>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactNode, useMemo, useCallback } from 'react';\nimport cloneDeep from 'lodash.clonedeep';\nimport set from 'lodash.set';\nimport result from 'lodash.result';\n\nimport { VarUIObject, VarUIContext } from './common/VarUIContext';\n\nexport interface IVarUIProps {\n  /**\n   * A JavaScript object or array to be mutated by the input components.\n   */\n  values: VarUIObject;\n\n  /**\n   * The function to be called whenever an update is available.\n   */\n  updateValues: (values: VarUIObject) => void;\n\n  /**\n   * Additional class names for the wrapper object.\n   */\n  className?: string;\n\n  /**\n   * Input components (or any other children).\n   */\n  children?: ReactNode;\n}\n\n/**\n * This is the main component which provides a Context for other components.\n * It is not required to use this component - other components accept\n * `onChange` and `value` properties which provide a similar functionality.\n */\nexport const VarUI: FC<IVarUIProps> = ({\n  values,\n  updateValues,\n  className,\n  children\n}) => {\n  const getValue = useCallback(\n    (path?: string) => (path ? result(values, path) : undefined),\n    [values]\n  );\n\n  const setValue = useCallback(\n    (path: string, value: any) => {\n      updateValues(set(cloneDeep(values), path, value));\n    },\n    [values, updateValues]\n  );\n\n  const contextValue = useMemo(() => ({ values, getValue, setValue }), [\n    values,\n    getValue,\n    setValue\n  ]);\n\n  return (\n    <VarUIContext.Provider value={contextValue}>\n      <div className={'react-var-ui ' + (className ? className : '')}>\n        {children}\n      </div>\n    </VarUIContext.Provider>\n  );\n};\n"],"names":["VarUIContext","createContext","undefined","useVarUIValue","path","fallbackValue","onChange","context","useContext","useMemo","getValue","useCallback","value","setValue","VarBase","label","children","React","className","disabled","PI2","Math","PI","wrap","angle","roundValue","min","max","step","integer","isFinite","decimalPlaces","toString","split","length","round","parseFloat","toFixed","IconDown","xmlns","width","height","fill","viewBox","fillRule","d","IconUp","result","Array","isArray","i","defaultValue","controlRef","useRef","currentValue","setCurrentValue","degrees","updatePosition","x","y","current","rect","getBoundingClientRect","atan2","top","left","events","usePointerDragSimple","useEffect","addEventListener","e","preventDefault","ref","style","transform","onDoubleClick","onWheel","deltaY","title","onClick","buttonLabel","alpha","useState","show","setShow","toggle","close","background","SketchPicker","color","alphaValue","rgb","a","hex","disableAlpha","showButtons","rounded","increaseValue","decreaseValue","type","target","options","serializedCurrentValue","JSON","stringify","parse","map","option","serializedValue","key","showInput","sliderRef","percent","clientX","maxLength","multiline","autoexpand","textareaStyle","overflow","resize","onInput","event","textarea","currentTarget","scrollHeight","checked","values","updateValues","set","cloneDeep","contextValue","Provider","percentValue","reset","clientY"],"mappings":"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"}
{"version":3,"file":"react-var-ui.cjs.production.min.js","sources":["../src/common/VarUIContext.ts","../src/VarBase.tsx","../src/VarAngle.tsx","../src/common/roundValue.ts","../src/icons/IconDown.tsx","../src/icons/IconUp.tsx","../src/VarXY.tsx","../src/icons/IconImageSelect.tsx","../src/VarButton.tsx","../src/VarCategory.tsx","../src/VarColor.tsx","../src/VarDisplay.tsx","../src/VarImage.tsx","../src/VarNumber.tsx","../src/VarSelect.tsx","../src/VarSlider.tsx","../src/VarString.tsx","../src/VarToggle.tsx","../src/VarUI.tsx"],"sourcesContent":["import { createContext, useContext, useMemo, useCallback } from 'react';\n\nexport type VarUIObject = any;\n\nexport interface IVarUIContext {\n  values: VarUIObject;\n  getValue: (path?: string) => any;\n  setValue: (path: string, value: any) => void;\n}\n\nexport const VarUIContext = createContext<IVarUIContext | undefined>(undefined);\n\n/**\n * Simple function used for custom input components.\n * @param path\n * @param fallbackValue\n * @param onChange\n * @returns [value: T, setValue: (value: T) => void]\n */\nexport function useVarUIValue<T>(\n  path?: string,\n  fallbackValue?: T,\n  onChange?: (path: string | undefined, value: T) => void\n): [T, (value: T) => void] {\n  const context = useContext(VarUIContext);\n  const value = useMemo(() => context?.getValue(path) ?? fallbackValue, [\n    context,\n    path,\n    fallbackValue\n  ]);\n  const setValue = useCallback(\n    (value: T) => {\n      if (path && context) {\n        context.setValue(path, value);\n      }\n      onChange?.(path, value);\n    },\n    [path, context, onChange]\n  );\n\n  return [value, setValue];\n}\n","import React, { FC, ReactChild, ReactNode } from 'react';\n\nexport interface IVarBaseProps {\n  /**\n   * Label to be shown left to the input.\n   */\n  label?: ReactChild;\n\n  /**\n   * Additional class names on the wrapping div element.\n   */\n  className?: string;\n\n  /**\n   * Should the component be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Children. Only rendered when provided directly to the VarBase component.\n   */\n  children?: ReactNode;\n}\n\nexport interface IVarBaseInputProps<T> extends IVarBaseProps {\n  /**\n   * Variable path in the data object.\n   */\n  path?: string;\n\n  /**\n   * Current value (only used if context and path aren't available).\n   * In most cases you aren't going to need this.\n   */\n  value?: T;\n\n  /**\n   * Default value for components that support resetting (on double click for example).\n   */\n  defaultValue?: T;\n\n  /**\n   * On change event, called with the new value if provided.\n   * In most cases you aren't going to need this.\n   */\n  onChange?: (path: string | undefined, value: T) => void;\n}\n\n/**\n * Base VarUI input component. Doesn't do anything besides displaying the label.\n * Used to construct other components from.\n */\nexport const VarBase: FC<IVarBaseProps> = ({\n  label,\n  children,\n  className,\n  disabled,\n}) => {\n  return (\n    <div\n      className={\n        'react-var-ui-label ' +\n        (label\n          ? 'react-var-ui-label-has-label '\n          : 'react-var-ui-label-no-label ') +\n        (disabled ? 'react-var-ui-disabled ' : '') +\n        (className ? className : '')\n      }\n    >\n      {!!label && <span>{label}</span>}\n      {children}\n    </div>\n  );\n};\n","import React, { FC, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { usePointerDragSimple } from 'react-use-pointer-drag';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nconst PI2 = Math.PI * 2;\n\nfunction wrap(angle: number) {\n  return (PI2 + (angle % PI2)) % PI2;\n}\n\nexport interface IVarAngleProps extends IVarBaseInputProps<number> {}\n\n/**\n * Angle picker component. Accepts and provides numbers (radians).\n */\nexport const VarAngle: FC<IVarAngleProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  disabled,\n  defaultValue = 0,\n  className,\n}) => {\n  const controlRef = useRef<HTMLDivElement>(null);\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const degrees = useMemo(\n    () => Math.round(wrap(currentValue) * (180 / Math.PI)),\n    [currentValue]\n  );\n\n  const updatePosition = useCallback(\n    (x: number, y: number) => {\n      if (!controlRef.current) {\n        return;\n      }\n\n      const div = controlRef.current;\n      const rect = div.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      setCurrentValue(wrap(Math.atan2(y - centerY, x - centerX) + Math.PI / 2));\n    },\n    [setCurrentValue]\n  );\n\n  const { events } = usePointerDragSimple(updatePosition);\n\n  useEffect(() => {\n    controlRef.current?.addEventListener('wheel', e => e.preventDefault());\n  }, []);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span className=\"react-var-ui-angle-value\">{degrees}&deg;</span>\n      <div className=\"react-var-ui-angle\">\n        <div\n          className=\"react-var-ui-angle-control\"\n          ref={controlRef}\n          style={{ transform: `rotate(${degrees}deg)` }}\n          onDoubleClick={() =>\n            typeof defaultValue !== 'undefined' && setCurrentValue(defaultValue)\n          }\n          onWheel={e => {\n            setCurrentValue(wrap(currentValue + 0.5 * (e.deltaY < 0 ? -1 : 1)));\n          }}\n          title=\"Angle\"\n          {...events}\n        ></div>\n      </div>\n    </VarBase>\n  );\n};\n","export function roundValue(\n  value: number,\n  min?: number,\n  max?: number,\n  step?: number,\n  integer?: boolean\n): number {\n  if (!isFinite(value)) {\n    value = min ?? 0;\n  }\n\n  let decimalPlaces = 2;\n  if (typeof step === 'number') {\n    decimalPlaces = step.toString().split('.')[1]?.length || 0;\n\n    if (decimalPlaces > 20) {\n      // JavaScript limitation\n      decimalPlaces = 20;\n    }\n\n    value = Math.round(value / step) * step;\n  }\n\n  if (typeof min === 'number') {\n    value = Math.max(min, value);\n  }\n\n  if (typeof max === 'number') {\n    value = Math.min(max, value);\n  }\n\n  return integer ? Math.round(value) : parseFloat(value.toFixed(decimalPlaces));\n}\n","import React, { FC } from 'react';\n\nexport const IconDown: FC = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"\n      />\n    </svg>\n  );\n};\n","import React, { FC } from 'react';\n\nexport const IconUp: FC = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"\n      />\n    </svg>\n  );\n};\n","import React, { FC, useCallback, useMemo, useRef } from 'react';\nimport { usePointerDragSimple } from 'react-use-pointer-drag';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport type IVarXYValue = [number, number];\n\nexport interface IVarXYProps extends IVarBaseInputProps<IVarXYValue> {\n  /**\n   * Minimum value.\n   */\n  min?: IVarXYValue;\n\n  /**\n   * Maximum value.\n   */\n  max?: IVarXYValue;\n\n  /**\n   * Step.\n   */\n  step?: IVarXYValue;\n}\n\nfunction roundValue(\n  value: IVarXYValue,\n  min: IVarXYValue,\n  max: IVarXYValue,\n  step: IVarXYValue\n): IVarXYValue {\n  const result: IVarXYValue = [0, 0];\n\n  if (!value || !Array.isArray(value) || value.length < 2) {\n    return result;\n  }\n\n  for (let i = 0; i < step.length; i++) {\n    const decimalPlaces = step[i].toString().split('.')[1]?.length || 0;\n    result[i] = Math.round(value[i] / step[i]) * step[i];\n    result[i] = Math.max(min[i], result[i]);\n    result[i] = Math.min(max[i], result[i]);\n\n    result[i] = parseFloat(result[i].toFixed(decimalPlaces));\n  }\n\n  return result;\n}\n\nfunction percentValue(\n  value: IVarXYValue,\n  min: IVarXYValue,\n  max: IVarXYValue\n): IVarXYValue {\n  if (!value) {\n    return [50, 50];\n  }\n\n  const result: IVarXYValue = [0, 0];\n\n  for (let i = 0; i < value.length; i++) {\n    result[i] = ((value[i] - min[i]) / (max[i] - min[i])) * 100;\n  }\n\n  return result;\n}\n\n/**\n * XY offset picker. Accepts and provides an array in form of [x, y].\n */\nexport const VarXY: FC<IVarXYProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  disabled,\n  className,\n  defaultValue = [0, 0],\n  min = [-1.0, -1.0],\n  max = [1.0, 1.0],\n  step = [0.01, 0.01]\n}) => {\n  const sliderRef = useRef<HTMLDivElement>(null);\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const rounded = useMemo(() => roundValue(currentValue, min, max, step), [\n    currentValue,\n    min,\n    max,\n    step\n  ]);\n  const percent = useMemo(() => percentValue(rounded, min, max), [\n    rounded,\n    min,\n    max\n  ]);\n\n  const updatePosition = useCallback(\n    (x: number, y: number) => {\n      if (!sliderRef.current) {\n        return;\n      }\n\n      const div = sliderRef.current;\n      const rect = div.getBoundingClientRect();\n\n      const percentX = (x - rect.left) / rect.width;\n      const percentY = (y - rect.top) / rect.height;\n\n      const value = roundValue(\n        [\n          min[0] + (max[0] - min[0]) * percentX,\n          min[1] + (max[1] - min[1]) * percentY\n        ],\n        min,\n        max,\n        step\n      );\n      setCurrentValue(value);\n    },\n    [setCurrentValue, min, max, step]\n  );\n\n  const { events } = usePointerDragSimple(updatePosition);\n\n  const reset = useCallback(() => {\n    if (typeof defaultValue !== 'undefined') {\n      setCurrentValue(defaultValue);\n    }\n  }, [defaultValue, setCurrentValue]);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span className=\"react-var-ui-xy-value\">\n        {rounded[0]}, {rounded[1]}\n      </span>\n      <div className=\"react-var-ui-xy\">\n        <div\n          className=\"react-var-ui-xy-space\"\n          ref={sliderRef}\n          onClick={e => updatePosition(e.clientX, e.clientY)}\n          onDoubleClick={reset}\n          {...events}\n        >\n          <div\n            className=\"react-var-ui-xy-control\"\n            style={{ top: percent[1] + '%', left: percent[0] + '%' }}\n          ></div>\n        </div>\n      </div>\n    </VarBase>\n  );\n};\n","import React, { FC } from 'react';\n\nexport const IconImageSelect: FC = () => {\n  return (\n    <svg\n      width=\"34\"\n      height=\"36\"\n      viewBox=\"0 0 34 36\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <rect x=\"0.5\" y=\"2.5\" width=\"33\" height=\"33\" rx=\"5.5\" stroke=\"#515151\" />\n      <path\n        d=\"M16.456 13.736V18.968H11.2V20.6H16.456V25.856H18.088V20.6H23.32V18.968H18.088V13.736H16.456Z\"\n        fill=\"#515151\"\n      />\n    </svg>\n  );\n};\n","import React, { FC, ReactNode } from 'react';\n\nimport { IVarBaseProps, VarBase } from './VarBase';\n\nexport interface IVarButtonProps extends IVarBaseProps {\n  /**\n   * Called when the button is clicked.\n   */\n  onClick?: () => void;\n\n  /**\n   * Text for the button.\n   */\n  buttonLabel: ReactNode;\n\n  /**\n   * Should the component be disabled.\n   */\n  disabled?: boolean;\n}\n\n/**\n * Button component. Only provides a onClick property.\n */\nexport const VarButton: FC<IVarButtonProps> = ({\n  label,\n  onClick,\n  buttonLabel,\n  disabled,\n  className\n}) => {\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span className=\"react-var-ui-button\">\n        <button onClick={() => onClick?.()} disabled={disabled}>\n          {buttonLabel}\n        </button>\n      </span>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactNode } from 'react';\n\nexport interface IVarCategoryProps {\n  /**\n   * Category label.\n   */\n  label: ReactNode;\n\n  /**\n   * Additional class names on the wrapping div element.\n   */\n  className?: string;\n}\n\n/**\n * Category component for grouping inputs.\n */\nexport const VarCategory: FC<IVarCategoryProps> = ({\n  label,\n  className,\n  children\n}) => {\n  return (\n    <div className={'react-var-ui-category ' + (className ? className : '')}>\n      <div className=\"react-var-ui-category-title\">{label}</div>\n      {!!children && <div>{children}</div>}\n    </div>\n  );\n};\n","import React, { FC, useCallback, useState, useEffect } from 'react';\nimport { SketchPicker } from 'react-color';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarColorProps extends IVarBaseInputProps<string> {\n  /**\n   * Should allow picking alpha values?\n   * If true, the result hex code will contain extra two characters representing the alpha value, from 00 to FF.\n   */\n  alpha?: boolean;\n}\n\n/**\n * Color picker component. Returns and accepts values in form of hex color strings.\n */\nexport const VarColor: FC<IVarColorProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  alpha,\n  disabled,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n\n  const [show, setShow] = useState(false);\n\n  const handleCloseClick = useCallback((event: MouseEvent) => {\n    const popup = (event.target as Element)?.closest('.sketch-picker');\n    const has_picker = document.getElementsByClassName(\"sketch-picker\").length != 0;\n    if (has_picker && show && popup == null) {\n      setShow(false);\n    }\n  }, [show, setShow]);\n\n  useEffect(() => {\n    if (show) {\n      window.addEventListener('click', handleCloseClick);\n    } else {\n      window.removeEventListener('click', handleCloseClick);\n    }\n    return () => window.removeEventListener(\"click\", handleCloseClick);\n}, [show]);\n\n  const toggle = useCallback(() => {\n    setShow(show => !show);\n  }, [setShow]);\n\n  // const close = useCallback(() => {\n  //   setShow(false);\n  // }, [setShow]);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span>\n        <span className=\"react-var-ui-color-value\">{currentValue}</span>\n        <div className=\"react-var-ui-color\">\n          <div className=\"react-var-ui-color-swatch\" onClick={toggle}>\n            <div\n              className=\"react-var-ui-color-color\"\n              title=\"Color preview\"\n              style={{ background: currentValue }}\n            />\n          </div>\n          {show ? (\n            <div className=\"react-var-ui-color-popover\">\n              <SketchPicker\n                color={currentValue}\n                onChange={result => {\n                  if (alpha) {\n                    let alphaValue = Math.round(\n                      (result.rgb.a ?? 1.0) * 255\n                    ).toString(16);\n                    if (alphaValue.length === 1) {\n                      alphaValue = '0' + alphaValue;\n                    }\n                    setCurrentValue(result.hex + alphaValue);\n                  } else {\n                    setCurrentValue(result.hex);\n                  }\n                }}\n                disableAlpha={!alpha}\n              />\n            </div>\n          ) : null}\n        </div>\n      </span>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactText } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseProps, VarBase } from './VarBase';\n\nexport interface IVarDisplayProps extends IVarBaseProps {\n  /**\n   * Variable path in the data object.\n   */\n  path?: string;\n\n  /**\n   * Current value (only used if context and path aren't available).\n   * In most cases you aren't going to need this.\n   */\n  value?: ReactText;\n}\n\n/**\n * A simple component that displays a string or a numeric value.\n */\nexport const VarDisplay: FC<IVarDisplayProps> = ({\n  label,\n  path,\n  value,\n  disabled,\n  className\n}) => {\n  const [currentValue] = useVarUIValue(path, value);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span>{currentValue}</span>\n    </VarBase>\n  );\n};\n","import React, { FC, useCallback, useRef } from 'react';\nimport { IconImageSelect } from './icons/IconImageSelect';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarImageProps\n  extends IVarBaseInputProps<{\n    src: HTMLImageElement | string | null;\n    type?: string;\n    extension?: string;\n  }> {\n  path?: string;\n  value?: {\n    src: HTMLImageElement | string | null;\n    type?: string;\n    extension?: string;\n  };\n}\n\n/**\n * A simple component that displays a string or a numeric value.\n */\nexport const VarImage: FC<IVarImageProps> = ({\n  label,\n  disabled,\n  path,\n  value,\n  onChange,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const deleteAction = useCallback(\n    () =>  {\n      setCurrentValue({ src: null });\n      if (inputRef && inputRef.current) {\n        inputRef.current.value = \"\";\n      }\n    },\n    [setCurrentValue, inputRef]\n  );\n\n  const onFileChange = useCallback(\n    event => {\n      const files = (event?.target as HTMLInputElement).files;\n      if (!files || !files.length) return;\n      const file = files[0];\n      const url = URL.createObjectURL(file);\n      const extension = file.name.split('.')?.pop()?.toLowerCase();\n      setCurrentValue({ src: url, type: file.type, extension: extension });\n    },\n    [setCurrentValue]\n  );\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <div className=\"react-var-ui-image\">\n        <div className=\"react-var-ui-image-wrapper\">\n          {currentValue == null || currentValue.src == null ? (\n            <IconImageSelect></IconImageSelect>\n          ) : (\n            <img\n              className=\"react-var-ui-image-wrapper-preview\"\n              src={\n                currentValue.src instanceof HTMLImageElement\n                  ? currentValue.src.src\n                  : currentValue.src\n              }\n              alt=\"preview\"\n            />\n          )}\n          <input ref={inputRef} type=\"file\" id='' onChange={onFileChange} />\n        </div>\n        {currentValue == null || currentValue.src == null ? null : (\n          <span className=\"react-var-ui-image-delete\" onClick={deleteAction}>\n            删除\n          </span>\n        )}\n      </div>\n    </VarBase>\n  );\n};\n","import React, { FC, useCallback, useMemo } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { roundValue } from './common/roundValue';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\nimport { IconDown } from './icons/IconDown';\nimport { IconUp } from './icons/IconUp';\n\nexport interface IVarNumberProps extends IVarBaseInputProps<number> {\n  /**\n   * Minimum value.\n   */\n  min?: number;\n\n  /**\n   * Maximum value.\n   */\n  max?: number;\n\n  /**\n   * Step.\n   */\n  step?: number;\n\n  /**\n   * Should the end result be rounded to an integer value.\n   */\n  integer?: boolean;\n\n  /**\n   * If true will display buttons that increase and decrease the value by step.\n   * Step must be set.\n   */\n  showButtons?: boolean;\n}\n\n/**\n * Integer/float number component. Accepts and provides numbers.\n */\nexport const VarNumber: FC<IVarNumberProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  min,\n  max,\n  step = 1,\n  integer,\n  showButtons,\n  disabled,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const rounded = useMemo(\n    () => roundValue(currentValue, min, max, step, !!integer),\n    [currentValue, min, max, step, integer]\n  );\n\n  const increaseValue = useCallback(\n    () =>\n      setCurrentValue(\n        roundValue(currentValue + (step ?? 1), min, max, step, !!integer)\n      ),\n    [currentValue, setCurrentValue, integer, min, max, step]\n  );\n\n  const decreaseValue = useCallback(\n    () =>\n      setCurrentValue(\n        roundValue(currentValue - (step ?? 1), min, max, step, !!integer)\n      ),\n    [currentValue, setCurrentValue, integer, min, max, step]\n  );\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <div className=\"react-var-ui-number\">\n        <input\n          className=\"react-var-ui-number-input\"\n          type=\"number\"\n          min={min}\n          max={max}\n          step={step}\n          value={rounded.toString()}\n          onChange={e =>\n            setCurrentValue(\n              roundValue(parseFloat(e.target.value), min, max, step, !!integer)\n            )\n          }\n        />\n        {showButtons && (\n          <>\n            <button title=\"Increase\" onClick={increaseValue}>\n              <IconUp />\n            </button>\n            <button title=\"Decrease\" onClick={decreaseValue}>\n              <IconDown />\n            </button>\n          </>\n        )}\n      </div>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactText, useMemo } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarSelectOption {\n  /**\n   * Key for the option. Also used as value if `value` is not specified.\n   */\n  key: ReactText;\n\n  /**\n   * Option label.\n   */\n  label: string;\n\n  /**\n   * Option value. Key will be used if not specified.\n   * Note: Will be serialized to JSON and deserialized when selected.\n   */\n  value?: any;\n}\n\nexport interface IVarSelectProps extends IVarBaseInputProps<any> {\n  /**\n   * Options to be displayed.\n   */\n  options: IVarSelectOption[];\n}\n\n/**\n * Select component. Returns and accepts either `value` from option object or `key` when `value` is not provided.\n */\nexport const VarSelect: FC<IVarSelectProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  options,\n  disabled,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n\n  const serializedCurrentValue = useMemo(() => JSON.stringify(currentValue), [\n    currentValue,\n  ]);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <div className=\"react-var-ui-select\">\n        <select\n          onChange={e => setCurrentValue(JSON.parse(e.target.value))}\n          value={serializedCurrentValue}\n          title=\"Select options\"\n        >\n          {options.map(option => {\n            const serializedValue = JSON.stringify(option.value ?? option.key);\n\n            return (\n              <option key={option.key} value={serializedValue}>\n                {option.label}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    </VarBase>\n  );\n};\n","import React, { FC, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { usePointerDragSimple } from 'react-use-pointer-drag';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { roundValue } from './common/roundValue';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\nimport { IconDown } from './icons/IconDown';\nimport { IconUp } from './icons/IconUp';\n\nexport interface IVarSliderProps extends IVarBaseInputProps<number> {\n  /**\n   * Minimum value.\n   */\n  min: number;\n\n  /**\n   * Maximum value.\n   */\n  max: number;\n\n  /**\n   * Step.\n   */\n  step: number;\n\n  /**\n   * Should the end result be rounded to an integer value.\n   */\n  integer?: boolean;\n\n  /**\n   * If true will display an editable input, otherwise shows a read only value.\n   */\n  showInput?: boolean;\n\n  /**\n   * If true will display buttons that increase and decrease the value by step.\n   */\n  showButtons?: boolean;\n}\n\n/**\n * Integer/float slider component. Accepts and provides numbers.\n */\nexport const VarSlider: FC<IVarSliderProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  min,\n  max,\n  step,\n  integer,\n  defaultValue,\n  showInput,\n  showButtons,\n  disabled,\n  className,\n}) => {\n  const sliderRef = useRef<HTMLDivElement>(null);\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n  const rounded = useMemo(\n    () => roundValue(currentValue, min, max, step, !!integer),\n    [currentValue, min, max, step, integer]\n  );\n  const percent = useMemo(() => ((rounded - min) / (max - min)) * 100, [\n    rounded,\n    min,\n    max,\n  ]);\n\n  const updatePosition = useCallback(\n    (x: number) => {\n      if (!sliderRef.current) {\n        return;\n      }\n\n      const div = sliderRef.current;\n      const rect = div.getBoundingClientRect();\n      const percent = (x - rect.left) / rect.width;\n      const value = roundValue(\n        min + (max - min) * percent,\n        min,\n        max,\n        step,\n        !!integer\n      );\n      setCurrentValue(value);\n    },\n    [setCurrentValue, integer, min, max, step]\n  );\n\n  const increaseValue = useCallback(\n    () =>\n      setCurrentValue(\n        roundValue(currentValue + step, min, max, step, !!integer)\n      ),\n    [currentValue, setCurrentValue, integer, min, max, step]\n  );\n\n  const decreaseValue = useCallback(\n    () =>\n      setCurrentValue(\n        roundValue(currentValue - step, min, max, step, !!integer)\n      ),\n    [currentValue, setCurrentValue, integer, min, max, step]\n  );\n\n  const { events } = usePointerDragSimple(updatePosition);\n\n  useEffect(() => {\n    sliderRef.current?.addEventListener('wheel', e => e.preventDefault(), { passive: false });\n  }, []);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <div className=\"react-var-ui-slider\">\n        <div\n          className=\"react-var-ui-slider-track\"\n          ref={sliderRef}\n          onClick={e => updatePosition(e.clientX)}\n          onDoubleClick={() =>\n            typeof defaultValue !== 'undefined' && setCurrentValue(defaultValue)\n          }\n          onWheel={e => {\n            e.deltaY < 0 ? increaseValue() : decreaseValue();\n          }}\n          title=\"Slider\"\n          {...events}\n        >\n          <div\n            className=\"react-var-ui-slider-content\"\n            style={{ width: percent + '%' }}\n          ></div>\n        </div>\n        {showInput ? (\n          <input\n            className=\"react-var-ui-slider-input\"\n            type=\"number\"\n            min={min}\n            max={max}\n            step={step}\n            value={rounded}\n            onChange={e =>\n              setCurrentValue(\n                roundValue(\n                  parseFloat(e.target.value),\n                  min,\n                  max,\n                  step,\n                  !!integer\n                )\n              )\n            }\n          />\n        ) : (\n          <span>{rounded.toString()}</span>\n        )}\n        {showButtons && (\n          <>\n            <button title=\"Increase\" onClick={increaseValue}>\n              <IconUp />\n            </button>\n            <button title=\"Decrease\" onClick={decreaseValue}>\n              <IconDown />\n            </button>\n          </>\n        )}\n      </div>\n    </VarBase>\n  );\n};\n","import React, { CSSProperties, FC, useMemo } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarStringProps extends IVarBaseInputProps<string> {\n  /**\n   * Maximum length of the text.\n   */\n  maxLength?: number;\n\n  /**\n   * Should the field be a textarea?\n   */\n  multiline?: boolean;\n\n  /**\n   * Should the text field auto expand?\n   * Only works with multiline instances.\n   */\n  autoexpand?: boolean;\n}\n\n/**\n * String input component. Accepts and provides a string value.\n */\nexport const VarString: FC<IVarStringProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  maxLength,\n  multiline,\n  autoexpand,\n  disabled,\n  className,\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n\n  const autoexpandOnInput = (event: React.FormEvent<HTMLTextAreaElement>) => {\n    const textarea = event.currentTarget;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  };\n\n  const textareaStyle: CSSProperties | undefined = useMemo(\n    () => (autoexpand ? { overflow: 'hidden', resize: 'none' } : undefined),\n    [autoexpand]\n  );\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      {multiline ? (\n        <textarea\n          className=\"react-var-ui-string-multiline\"\n          value={currentValue}\n          onChange={e => setCurrentValue(e.target.value)}\n          onInput={autoexpand ? autoexpandOnInput : undefined}\n          style={textareaStyle}\n        />\n      ) : (\n        <span className=\"react-var-ui-string\">\n          <input\n            type=\"text\"\n            maxLength={maxLength}\n            value={currentValue}\n            onChange={e => setCurrentValue(e.target.value)}\n          />\n        </span>\n      )}\n    </VarBase>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { useVarUIValue } from './common/VarUIContext';\nimport { IVarBaseInputProps, VarBase } from './VarBase';\n\nexport interface IVarToggleProps extends IVarBaseInputProps<boolean> {}\n\n/**\n * Checkbox/toggle component. Accepts and returns a boolean (true/false).\n */\nexport const VarToggle: FC<IVarToggleProps> = ({\n  label,\n  path,\n  value,\n  onChange,\n  disabled,\n  className\n}) => {\n  const [currentValue, setCurrentValue] = useVarUIValue(path, value, onChange);\n\n  return (\n    <VarBase label={label} disabled={disabled} className={className}>\n      <span>\n        <label className=\"react-var-ui-toggle\" title=\"Toggle\">\n          <input\n            type=\"checkbox\"\n            checked={currentValue || false}\n            onChange={e => setCurrentValue(e.target.checked)}\n          />\n          <span className=\"react-var-ui-toggle-helper\"></span>\n        </label>\n      </span>\n    </VarBase>\n  );\n};\n","import React, { FC, ReactNode, useMemo, useCallback } from 'react';\nimport cloneDeep from 'lodash.clonedeep';\nimport set from 'lodash.set';\nimport result from 'lodash.result';\n\nimport { VarUIObject, VarUIContext } from './common/VarUIContext';\n\nexport interface IVarUIProps {\n  /**\n   * A JavaScript object or array to be mutated by the input components.\n   */\n  values: VarUIObject;\n\n  /**\n   * The function to be called whenever an update is available.\n   */\n  updateValues: (values: VarUIObject) => void;\n\n  /**\n   * Additional class names for the wrapper object.\n   */\n  className?: string;\n\n  /**\n   * Input components (or any other children).\n   */\n  children?: ReactNode;\n}\n\n/**\n * This is the main component which provides a Context for other components.\n * It is not required to use this component - other components accept\n * `onChange` and `value` properties which provide a similar functionality.\n */\nexport const VarUI: FC<IVarUIProps> = ({\n  values,\n  updateValues,\n  className,\n  children\n}) => {\n  const getValue = useCallback(\n    (path?: string) => (path ? result(values, path) : undefined),\n    [values]\n  );\n\n  const setValue = useCallback(\n    (path: string, value: any) => {\n      updateValues(set(cloneDeep(values), path, value));\n    },\n    [values, updateValues]\n  );\n\n  const contextValue = useMemo(() => ({ values, getValue, setValue }), [\n    values,\n    getValue,\n    setValue\n  ]);\n\n  return (\n    <VarUIContext.Provider value={contextValue}>\n      <div className={'react-var-ui ' + (className ? className : '')}>\n        {children}\n      </div>\n    </VarUIContext.Provider>\n  );\n};\n"],"names":["VarUIContext","createContext","undefined","useVarUIValue","path","fallbackValue","onChange","context","useContext","useMemo","getValue","useCallback","value","setValue","VarBase","label","children","React","className","disabled","PI2","Math","PI","wrap","angle","roundValue","min","max","step","integer","isFinite","decimalPlaces","toString","split","length","round","parseFloat","toFixed","IconDown","xmlns","width","height","fill","viewBox","fillRule","d","IconUp","result","Array","isArray","i","IconImageSelect","x","y","rx","stroke","defaultValue","controlRef","useRef","currentValue","setCurrentValue","degrees","updatePosition","current","rect","getBoundingClientRect","atan2","top","left","events","usePointerDragSimple","useEffect","addEventListener","e","preventDefault","ref","style","transform","onDoubleClick","onWheel","deltaY","title","onClick","buttonLabel","alpha","useState","show","setShow","handleCloseClick","event","popup","target","_event$target","closest","document","getElementsByClassName","window","removeEventListener","toggle","background","SketchPicker","color","alphaValue","rgb","a","hex","disableAlpha","inputRef","deleteAction","src","onFileChange","files","file","url","URL","createObjectURL","extension","name","_file$name$split","pop","_file$name$split$pop","toLowerCase","type","HTMLImageElement","alt","id","showButtons","rounded","increaseValue","decreaseValue","options","serializedCurrentValue","JSON","stringify","parse","map","option","serializedValue","key","showInput","sliderRef","percent","passive","clientX","maxLength","multiline","autoexpand","textareaStyle","overflow","resize","onInput","textarea","currentTarget","scrollHeight","checked","values","updateValues","set","cloneDeep","contextValue","Provider","percentValue","reset","clientY"],"mappings":"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"}